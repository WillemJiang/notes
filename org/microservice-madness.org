* 微服务的优点（为什么要使用微服务）

  - 独立开发

    小的组件能够以小团队为单位进行开发。开发人员可以更快的了解并投入项目开发，新增特性更容易。

  - 独立部署

    组件可以独立的进行弹性伸缩

  - 复用性

    小的功能模块更容易被复用


* 微服务的问题


  - 开发复杂性增加

    特性可能会涉及多个服务，开发人员需要接触了解所有相关的服务。

  - 运维复杂性增加

    需要维护的服务数量激增，服务之间的依赖和调用关系复杂，可能的问题点增加。

  - Devops复杂性增加

    对于Devops，同时承担开发和运维角色，并且由于容器和编排技术的快速发展，对于开发者的压力更加大了。

  - 极高的专业性

    用好微服务对于开发和运维人员的技术水平要求非常高。

  - 真实系统的模糊边界

    对真实系统进行模块划分和建模非常的困难，许多服务并不能完全解耦。
    如果拆分后的服务仍然具有强耦合性，那么微服务带来的独立开发、部署和利用性的优势全部丧失。

  - 服务状态的复杂性

    无状态的服务非常容易处理
    许多服务都是有状态的

  - 服务间通信的复杂性

    服务间通信可能出错，出错重试的逻辑可能会非常复杂。同步调用不可取，异步调用会导致服务有状态。
    对于使用MQ进行服务间通信的系统，不同版本服务的消息格式可能会有差异。

  - 版本管理

    服务间的版本依赖管理非常困难。

  - 分布式事务

    在需要使用事务的场景下，微服务实现事务将会非常困难

  - 许多微服务构架的系统其实是变相的宏系统

    如果系统内的服务都是强依赖，强耦合的，那么系统本质上是一个宏系统。
    服务编排非常复杂，服务编排系统的运维也很复杂


* 微服务不是一种架构

  没有微服务架构。微服务只是一种组件的实现模式。


* 总结
  TBD
  
